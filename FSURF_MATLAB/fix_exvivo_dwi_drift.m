function fix_exvivo_dwi_drift(outfile, outimgdir, infile, nB0)

% fix_exvivo_dwi_drift(outfile, outimgdir, infile)
%   Fix signal intensity drift in ex-vivo DWIs
%   outfile: Output corrected DWIs
%   outimgdir: Output screenshots
%   infile:  Input DWIs
 
if ~(exist('outimgdir', 'dir'))
  mkdir(outimgdir)
end
 %addpath('/autofs/space/vault_006/exvivo/rock/4/users/hires/scripts/benner_diffusion_scripts/');
 %addpath('/autofs/space/vault_006/users/exvivo/scripts/benner_diffusion_scripts');
 %addpath('/usr/local/freesurfer/dev/matlab', 1);

% cd /space/qtvraid/33/users/benner/ex-vivo/20080808/Avanto-25096-20080801-162201-373000/000017
% cd /space/qtvraid/33/users/benner/ex-vivo/20080815/Avanto-25096-20080815-152626-671000/000025

doWriteFixedData = true;  % will write fixed data
%doWriteFixedData = false; % will skip writing and checking of fixed data

%doCheckFixedData = true; % will re-read and process fixed data
doCheckFixedData = false; % will skip checking fixed data

fitType='exp';	% exponential fit
%fitType='poly';	% n-th order polynomial fit
%polyOrder = 1; % 1st order polynomial i.e. linear fit
polyOrder = 2;
%polyOrder = 3;
%polyOrder = 4;


%bgThreshold = 50;
%bgThreshold = 100;
%bgThreshold = 200;
%bgThreshold = 250;
%bgThreshold = 300;
%bgThreshold = 400;
%bgThreshold = 500;
%bgThreshold = 1000;
%bgThresholdB0  = [200, 3000];
%bgThresholdDWI = [300, 4095];
%bgThresholdB0  = [50, 3000];
%bgThresholdDWI = [100, 4095];
%bgThresholdB0  = [200, 3000];
%bgThresholdDWI = [200, 4095];
bgThresholdB0  = [100, 2000];
bgThresholdDWI = [200, 4095];

%nB0 = 0;
%nB0 = 1;
%nB0 = 2;
%nB0 = 4;
%nB0 = 8;
%nB0 = 10;
if ~exist('nB0', 'var')
  nB0 = 12;
end
disp(nB0);

% load data
mri = MRIread(infile); % name of file generated by AY's do,qbi script

x = 1:size(mri.vol, 4);

% mean B0
mriB0 = mean(mri.vol(:,:,:,1:nB0), 4);
mriB0min = min(mriB0(:));
mriB0max = max(mriB0(:));

% show data
figure(1); clf;
imagesc(mosaic_tb(mriB0, ceil(sqrt(size(mriB0, 3)))), [0, mriB0max/2]);
axis image;
colormap(gray(256));
title('Mean B0', 'Interpreter', 'none');
drawnow;
print('-dpng', [outimgdir, '/mean_b0.png']);

% mean DWI
mriDWI = mean(mri.vol(:,:,:,nB0+1:end), 4);
mriDWImin = min(mriDWI(:));
mriDWImax = max(mriDWI(:));

% show data
figure(2); clf;
imagesc(mosaic_tb(mriDWI, ceil(sqrt(size(mriDWI, 3)))), [0, mriDWImax/2]);
axis image;
colormap(gray(256));
title('Mean DWI', 'Interpreter', 'none');
drawnow;
print('-dpng', [outimgdir, '/mean_dwi.png']);

% mean value in tissue over measurement
k = (bgThresholdB0(1) <= mriB0  & mriB0  <= bgThresholdB0(2) & ...
	bgThresholdDWI(1) <= mriDWI & mriDWI <= bgThresholdDWI(2));
mask = zeros(size(mriDWI));
mask(k) = 1;
meanVals = zeros(size(mri.vol, 4), 1);
for i=1:size(mri.vol, 4)
	tmp1 = mri.vol(:,:,:,i);
	tmp2 = tmp1(k);
	meanVals(i) = mean(tmp2(:));
end
clear tmp1 tmp2;

% show mask
figure(3); clf;
imagesc(mosaic_tb(mask, ceil(sqrt(size(mask, 3)))));
axis image;
colormap(gray(256));
%title(sprintf('Mask (threshold=%d)', bgThreshold), 'Interpreter', 'none');
title(sprintf('Mask ([%d<=B0<=%d], [%d<=DWI<=%d])', ...
	bgThresholdB0(1), bgThresholdB0(2), bgThresholdDWI(1), bgThresholdDWI(2)), 'Interpreter', 'none');
drawnow;
%print('-dpng', sprintf('dwi_mask_bgthres%.4d.png', bgThreshold));
print('-dpng', ...
  sprintf([outimgdir, '/dwi_mask_bgthres_b0_%.4d_%.4d_dwi_%.4d_%.4d.png'], ...
  bgThresholdB0(1), bgThresholdB0(2), bgThresholdDWI(1), bgThresholdDWI(2)));

switch lower(fitType)
	case {'exp'}
		% fit exponential to high-b values
		coeffs = [300.0 50.0 0.0 500.0]; % starting guess [S0, tau, delta, offset]
		%lb = [0.0 0.0 -100.0 0.0];
		lb = [-10000.0 -1000.0 -100.0 0.0];
		ub = [10000.0 1000.0 100.0 5000.0];
		options = optimset('Display', 'off');
		coeffsfit = lsqcurvefit(@exvivo_dwi_fit_fun, coeffs, x(nB0+1:end)', meanVals(nB0+1:end), ...
			lb, ub, options);
		S0 = coeffsfit(1);
		tau = coeffsfit(2);
		delta = coeffsfit(3);
		offset = coeffsfit(4);

		% fitted data
		meanValsFit = S0 * exp(-(x-delta)'/tau) + offset;
		
		% fit result string
		fitTypeStr = sprintf('fit type: ''%s''', fitType);
		fitTypeFileStr = sprintf('%s', fitType);
		fitStr = sprintf('S0 = %.2f  tau = %.2f  delta = %.2f  offset = %.2f  baseline=%.2f', ...
			S0, tau, delta, offset, meanValsFit(end));
	case {'poly'}
		% fit n-th order polynomial to high-b values
		p = polyfit(x(nB0+1:end)', meanVals(nB0+1:end), polyOrder);
		
		% fitted data
		meanValsFit = polyval(p, x);
		meanValsFit = meanValsFit';
		
		% fit result string
		fitTypeStr = sprintf('fit type: ''%s'', order: %d', fitType, polyOrder);
		fitTypeFileStr = sprintf('%s_%d', fitType, polyOrder);
		fitStr = '';
		for i=1:polyOrder+1
			if (i<=polyOrder)
				fitStr = sprintf('%s%+.6f*x^%d ', fitStr, p(i), polyOrder-i+1);
			else
				fitStr = sprintf('%s%+.6f', fitStr, p(i));
			end
		end
	otherwise
		disp('Unknown method!')
		return;
end

meanValsFactor = meanValsFit / meanValsFit(end);
meanValsOffset = 0.0; % default for complete scans
%meanValsOffset = 200.0 - meanValsFit(end); % to normalize truncated scans
meanValsFactor(1:nB0) = meanValsFactor(nB0+1);
meanValsFixed = meanVals ./ meanValsFactor + meanValsOffset;

fitStr = sprintf('%s  meanValsFactor(1) = %.2f', fitStr, meanValsFactor(1));

fprintf('%s\n', fitStr);
[fid, message] = fopen('fix_exvivo_dwi_drift.txt', 'at+');
if (fid == -1)
	fprintf('WARNING: Could not open ''%s'' for writing!\n', 'fix_exvivo_dwi_drift.txt');
	fprintf('%s\n', message);
else
	fprintf(fid, '%s\n', fitStr);
	fclose(fid);
end

% show curve
figure(4); clf;
plot(x, meanVals, x, meanValsFit, x, meanValsFixed);
xlabel('Measurement #');
ylabel('Signal Intensity');
title(sprintf('meanVals + meanValsFit (all data), nB0=%d, %s', nB0, fitTypeStr));
legend('meanVals', 'meanValsFit', 'meanValsFixed');
drawnow;
print('-dpng', sprintf([outimgdir, '/SI_mean_fit_%s.png'], fitTypeFileStr));

figure(5); clf;
plot(x(nB0+1:end), meanVals(nB0+1:end), x(nB0+1:end), meanValsFit(nB0+1:end), ...
	x(nB0+1:end), meanValsFixed(nB0+1:end));
xlabel('Measurement #');
ylabel('Signal Intensity');
title(sprintf('meanVals + meanValsFit (high-b data only), nB0=%d, %s', nB0, fitTypeStr));
legend('meanVals', 'meanValsFit', 'meanValsFixed');
drawnow;
print('-dpng', sprintf([outimgdir, '/SI_mean_fit_%s_highb_only.png'], fitTypeFileStr));

figure(6); clf;
plot(x(nB0+1:end), meanValsFixed(nB0+1:end), 'r');
xlabel('Measurement #');
ylabel('Signal Intensity');
title(sprintf('meanValsFixed (high-b data only), nB0=%d, %s', nB0, fitTypeStr));
legend('meanValsFixed');
drawnow;
print('-dpng', sprintf([outimgdir, '/SI_mean_fit_%s_highb_only_fixed_only.png'], fitTypeFileStr));

figure(7); clf;
plot(meanValsFactor);
xlabel('Measurement #');
ylabel('Factor');
title(sprintf('meanValsFactor (all data), nB0=%d, %s', nB0, fitTypeStr));
drawnow;
print('-dpng', sprintf([outimgdir, '/SI_factor_fit_%s.png'], fitTypeFileStr));

if (~doWriteFixedData)
	return;
end

% fix data
for i=1:size(mri.vol, 4)
	mri.vol(:,:,:,i) = mri.vol(:,:,:,i) / meanValsFactor(i) + meanValsOffset;
end

% save fixed data
err = MRIwrite(mri, outfile, 'short');
if (err ~= 0)
	fprintf('ERROR: Failed to write "%s"!\n', outfile);
end

% convert output data from float to short
%[status, result] = system('FSLOUTPUTTYPE=NIFTI; export FSLOUTPUTTYPE; /usr/pubsw/packages/fsl/current/bin/fslmaths dwi_fixed.nii dwi_fixed_tmp.nii -odt short; mv -f dwi_fixed_tmp.nii dwi_fixed.nii');
%[status, result] = system('FSLOUTPUTTYPE=NIFTI; export FSLOUTPUTTYPE; /usr/pubsw/packages/fsl/current/bin/fslmaths /tmp/dwi_fixed.nii dwi_fixed.nii -odt short; rm -f /tmp/dwi_fixed.nii');
%if (status ~= 0)
%    fprintf('ERROR: Failed to convert ''%s'' from float to short!\n', 'dwi_fixed.nii');
%    return;
%end

if (~doCheckFixedData)
	return;
end

% double-check fix

% load data
mriCheck = MRIread(outfile);

% mean DWI
mriCheckDWI = mean(mriCheck.vol(:,:,:,nB0+1:end), 4);
mriCheckDWImin = min(mriCheckDWI(:));
mriCheckDWImax = max(mriCheckDWI(:));

% show data
figure(8);
imagesc(mosaic_tb(mriCheckDWI, ceil(sqrt(size(mriCheckDWI, 3)))), [0, mriCheckDWImax/2]);
axis image;
colormap(gray(256));
title('Mean DWI Check', 'Interpreter', 'none');
drawnow;

% mean value in tissue over measurement
%k = (mriDWI > 200);
%k = (mriDWI > 135);
%mask = zeros(size(mriDWI));
%mask(k) = 1;
meanValsFixedCheck = zeros(size(mriCheck.vol, 4), 1);
for i=1:size(mriCheck.vol, 4)
	tmp1 = mriCheck.vol(:,:,:,i);
	tmp2 = tmp1(k);
	meanValsFixedCheck(i) = mean(tmp2(:));
end
clear tmp1 tmp2;

% show curve
figure(9); clf;
plot(x, meanVals, x, meanValsFit, x, meanValsFixed, x, meanValsFixedCheck);
xlabel('Measurement #');
ylabel('Signal Intensity');
title(sprintf('meanVals + meanValsFit (all data), nB0=%d, %s', nB0, fitTypeStr));
legend('meanVals', 'meanValsFit', 'meanValsFixed', 'meanValsFixedCheck');
drawnow;
print('-dpng', sprintf([outimgdir, '/SI_mean_fit_%s_fixed.png'], fitTypeFileStr));

figure(10); clf;
plot(x(nB0+1:end), meanVals(nB0+1:end), x(nB0+1:end), meanValsFit(nB0+1:end), ...
	x(nB0+1:end), meanValsFixed(nB0+1:end), x(nB0+1:end), meanValsFixedCheck(nB0+1:end));
xlabel('Measurement #');
ylabel('Signal Intensity');
title(sprintf('meanVals + meanValsFit (high-b data only), nB0=%d, %s', nB0, fitTypeStr));
legend('meanVals', 'meanValsFit', 'meanValsFixed', 'meanValsFixedCheck');
drawnow;
print('-dpng', sprintf([outimgdir, '/SI_mean_fit_%s_highb_only_fixed.png'], fitTypeFileStr));
